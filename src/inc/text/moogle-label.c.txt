double
addletter(Mesh *m, char c, Point2d *o)
{
	int i = m->verticeslen;
	switch(c) {
	case '\n':
		o->x = 0;
		o->y -= 1.5;
		return 0;
		break;
	case 'a':
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 0, 0);
		addvertex(m, o->x + 0, 0.5, 0);
		addvertex(m, o->x + 1, 0.5, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 2, i + 3);
		addedge(m, i + 4, i + 5);
		break;
	case 'b':
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 0.5, 0);
		addvertex(m, o->x + 1, o->y + 0.5, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 2, i + 3);
		addedge(m, i + 3, i + 0);
		addedge(m, i + 4, i + 5);
		break;
	case 'c':
		addvertex(m, o->x + 1, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 2, i + 3);
		break;
	case 'd':
		addvertex(m, o->x + 1, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 0.5, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 0.5, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 2, i + 3);
		addedge(m, i + 3, i + 4);
		addedge(m, i + 4, i + 0);
		break;
	case 'e':
		addvertex(m, o->x + 1, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addvertex(m, o->x + 0, o->y + 0.5, 0);
		addvertex(m, o->x + 0.5, o->y + 0.5, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 2, i + 3);
		addedge(m, i + 4, i + 5);
		break;
	case 'f':
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addvertex(m, o->x + 0, o->y + 0.5, 0);
		addvertex(m, o->x + 0.5, o->y + 0.5, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 3, i + 4);
		break;
	case 'g':
		addvertex(m, o->x + 0.5, o->y + 0.5, 0);
		addvertex(m, o->x + 1, o->y + 0.5, 0);
		addvertex(m, o->x + 1, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 2, i + 3);
		addedge(m, i + 3, i + 4);
		addedge(m, i + 4, i + 5);
		break;
	case 'h':
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 0, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addvertex(m, o->x + 0, o->y + 0.5, 0);
		addvertex(m, o->x + 1, o->y + 0.5, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 2, i + 3);
		addedge(m, i + 4, i + 5);
		break;
	case 'i':
		addvertex(m, o->x + 0.5, o->y + 0, 0);
		addvertex(m, o->x + 0.5, o->y + 1, 0);
		addedge(m, i + 0, i + 1);
		break;
	case 'j':
		addvertex(m, o->x + 0, o->y + 0.5, 0);
		addvertex(m, o->x + 0.5, o->y + 0, 0);
		addvertex(m, o->x + 1, o->y + 0, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 2, i + 3);
		addedge(m, i + 3, i + 4);
		break;
	case 'k':
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 0, o->y + 0.5, 0);
		addvertex(m, o->x + 0.5, o->y + 0.5, 0);
		addvertex(m, o->x + 1, o->y + 0, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 2, i + 3);
		addedge(m, i + 3, i + 4);
		addedge(m, i + 3, i + 5);
		break;
	case 'l':
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 1, o->y + 0, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		break;
	case 'm':
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 0.5, o->y + 0.5, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 0, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 2, i + 3);
		addedge(m, i + 3, i + 4);
		break;
	case 'n':
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 0, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 2, i + 3);
		break;
	case 'o':
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 0, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 2, i + 3);
		addedge(m, i + 3, i + 0);
		break;
	case 'p':
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 0.5, 0);
		addvertex(m, o->x + 0, o->y + 0.5, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 2, i + 3);
		addedge(m, i + 3, i + 4);
		break;
	case 'q':
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 0, 0);
		addvertex(m, o->x + 0.5, o->y + 0.5, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 2, i + 3);
		addedge(m, i + 3, i + 0);
		addedge(m, i + 3, i + 4);
		break;
	case 'r':
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 0.5, 0);
		addvertex(m, o->x + 0, o->y + 0.5, 0);
		addvertex(m, o->x + 1, o->y, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 2, i + 3);
		addedge(m, i + 3, i + 4);
		addedge(m, i + 4, i + 5);
		break;
	case 's':
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 1, o->y + 0, 0);
		addvertex(m, o->x + 1, o->y + 0.5, 0);
		addvertex(m, o->x + 0, o->y + 0.5, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 2, i + 3);
		addedge(m, i + 3, i + 4);
		addedge(m, i + 4, i + 5);
		break;
	case 't':
		addvertex(m, o->x + 0.5, o->y + 0, 0);
		addvertex(m, o->x + 0.5, o->y + 1, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 2, i + 3);
		break;
	case 'u':
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 0.5, o->y + 0, 0);
		addvertex(m, o->x + 1, o->y + 0.5, 0);
		addvertex(m, o->x + 1, o->y + 0, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 2, i + 3);
		addedge(m, i + 4, i + 5);
		break;
	case 'v':
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 0.5, o->y + 0, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		break;
	case 'w':
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 0.5, o->y + 0.5, 0);
		addvertex(m, o->x + 1, o->y + 0, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 2, i + 3);
		addedge(m, i + 3, i + 4);
		break;
	case 'x':
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 0, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 2, i + 3);
		break;
	case 'y':
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 0.5, o->y + 0.5, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addvertex(m, o->x + 0.5, o->y + 0, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 1, i + 3);
		break;
	case 'z':
		addvertex(m, o->x + 1, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 2, i + 3);
		break;
	case '0':
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 0, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 2, i + 3);
		addedge(m, i + 3, i + 0);
		addedge(m, i + 0, i + 2);
		break;
	case '1':
		addvertex(m, o->x + 0.5, o->y + 0, 0);
		addvertex(m, o->x + 0.5, o->y + 1, 0);
		addvertex(m, o->x + 0, o->y + 0.5, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		break;
	case '2':
		addvertex(m, o->x + 1, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 1, o->y + 0.5, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 2, i + 3);
		addedge(m, i + 3, i + 4);
		break;
	case '3':
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 1, o->y + 0, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 0.5, o->y + 0.5, 0);
		addvertex(m, o->x + 1, o->y + 0.5, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 2, i + 3);
		addedge(m, i + 4, i + 5);
		break;
	case '4':
		addvertex(m, o->x + 1, o->y + 0, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 0.5, 0);
		addvertex(m, o->x + 0, o->y + 0.5, 0);
		addvertex(m, o->x + 0.5, o->y + 1, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 2, i + 3);
		addedge(m, i + 3, i + 4);
		break;
	case '5':
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 1, o->y + 0, 0);
		addvertex(m, o->x + 1, o->y + 0.5, 0);
		addvertex(m, o->x + 0, o->y + 0.5, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 2, i + 3);
		addedge(m, i + 3, i + 4);
		addedge(m, i + 4, i + 5);
		break;
	case '6':
		addvertex(m, o->x + 0, o->y + 0.5, 0);
		addvertex(m, o->x + 1, o->y + 0.5, 0);
		addvertex(m, o->x + 1, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 2, i + 3);
		addedge(m, i + 3, i + 4);
		break;
	case '7':
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		break;
	case '8':
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 0.5, 0);
		addvertex(m, o->x + 1, o->y + 0.5, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 2, i + 3);
		addedge(m, i + 3, i + 0);
		addedge(m, i + 4, i + 5);
		break;
	case '9':
		addvertex(m, o->x + 1, o->y + 0, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 0, o->y + 0.5, 0);
		addvertex(m, o->x + 1, o->y + 0.5, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 2, i + 3);
		addedge(m, i + 3, i + 4);
		break;
	case '_':
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 1, o->y + 0, 0);
		addedge(m, i + 0, i + 1);
		break;
	case '-':
		addvertex(m, o->x + 0, o->y + 0.5, 0);
		addvertex(m, o->x + 1, o->y + 0.5, 0);
		addedge(m, i + 0, i + 1);
		break;
	case '+':
		addvertex(m, o->x + 0, o->y + 0.5, 0);
		addvertex(m, o->x + 1, o->y + 0.5, 0);
		addvertex(m, o->x + 0.5, o->y + 0, 0);
		addvertex(m, o->x + 0.5, o->y + 1, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 2, i + 3);
		break;
	case '<':
		addvertex(m, o->x + 0.75, o->y + 0, 0);
		addvertex(m, o->x + 0.25, o->y + 0.5, 0);
		addvertex(m, o->x + 0.75, o->y + 1, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		break;
	case '>':
		addvertex(m, o->x + 0.25, o->y + 0, 0);
		addvertex(m, o->x + 0.75, o->y + 0.5, 0);
		addvertex(m, o->x + 0.25, o->y + 1, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		break;
	case ' ':
		break;
	default:
		addvertex(m, o->x + 0, o->y + 0, 0);
		addvertex(m, o->x + 0, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 1, 0);
		addvertex(m, o->x + 1, o->y + 0, 0);
		addvertex(m, o->x + 0.5, o->y + 0.5, 0);
		addedge(m, i + 0, i + 1);
		addedge(m, i + 1, i + 2);
		addedge(m, i + 2, i + 3);
		addedge(m, i + 3, i + 0);
		addedge(m, i + 1, i + 3);
		addedge(m, i + 0, i + 2);
	}
	return 1.25;
}

Mesh *
addlabel(Scene *s, char *text)
{
	int i = 0;
	Point2d offset = Pt2d(0, 0);
	char c;
	Mesh m = Ms3d(0, 0, 0);
	while((c = text[i++]))
		offset.x += addletter(&m, c, &offset);
	return addmesh(s, m);
}
