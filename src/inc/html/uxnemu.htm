<p>Devices are external systems to the Uxn code such as the screen, the mouse, the keyboard, etc. There is a maximum of 16 devices accessible via the last page in memory, each device have 8 bytes to read from, and 8 bytes to write to. </p>

<h2>Memory</h2>

<table border='1'>
	<tr><th rowspan='4'>Core</th><td>Program Counter</td><td>1 short</td></tr>
	<tr><td>Literal Counter</td><td>1 byte</td></tr>
	<tr><td>Balance Counter</td><td>1 byte</td></tr>
	<tr><td>Status Register</td><td>1 byte</td></tr>
	<tr><th rowspan='2'>Stacks</th><td>Working Stack</td><td>256 bytes</td></tr>
	<tr><td>Return Stack</td><td>256 bytes</td></tr>
	<tr><th>Memory</th><td>RAM</td><td>65536 bytes</td></tr>
</table>

<h3>Status Register</h3>

<p>The status register is distributed as follows, it shares the same byte as the register selector. The <b>halt</b> flag is used by the BRK instruction is stops the cpu, the <b>short</b> flag is used for 16-bits operations, the <b>return</b> flag is set when an instruction targets the return stack, and the <b>cond</b> flag is set when the operator requires a logic flag from the stack.</p>

<pre>
T C S H
| | | +---- Halt   0x01
| | +------ Short  0x02
| +-------- Return 0x04
+---------- Cond   0x08
</pre>

<h3>Return Stack</h3>

<p>The CPU can tunnel through 128 subroutines and find its way back with the return stack, the JSR opcode jumps while pushing a return address to the return-stack, the opcode to return from a subroutine is <code>JMPr</code>. An item on the work stack can be sent to the return stack with <code>STH</code>(stash) and returned with <code>STHr</code>. To learn more, see the <a href='uxambly.html'>Uxambly</a> documentation.</p>

<h2>Devices</h2>

<table border='1'>
	<tr><th rowspan='2' colspan='2'>device</th><th colspan='2'>i/o</th></tr>
	<tr><th>read 0x00</th><th>write 0x08</th></tr>
	<tr><th rowspan='4'><code>00</code></th><th rowspan='4'>console</th><td rowspan='4'><i>nil</i></td><td class='clr1'>char</td></tr>
	<tr><td>byte</td></tr>
	<tr><td>short*</td></tr>
	<tr><td>string*</td></tr>
	<tr><th rowspan='3'><code>10</code></th><th rowspan='3'>screen</th><td>width*</td><td>x*</td></tr>
	<tr><td>height*</td><td>y*</td></tr>
	<tr><td></td><td class='clr1'>color</td></tr>
	<tr><th rowspan='4'><code>20</code></th><th rowspan='4'>sprite</th><td>width*</td><td>x*</td></tr>
	<tr><td>height*</td><td>y*</td></tr>
	<tr><td></td><td>address*</td></tr>
	<tr><td></td><td class='clr1'>color</td></tr>
	<tr><th><code>30</code></th><th>controller</th><td>player1 byte</td><td><i>nil</i></td></tr>
	<tr><th><code>40</code></th><th>keyboard</th><td>key byte</td><td><i>nil</i></td></tr>
	<tr><th rowspan='4'><code>50</code></th><th rowspan='4'>mouse</th><td>x*</td><td rowspan="4"><i>nil</i></td></tr>
	<tr><td>y*</td></tr>
	<tr><td>button byte</td></tr>
	<tr><td>chord byte</td></tr>
	<tr><th rowspan='4'><code>60</code></th><th rowspan='4'>file</th><td rowspan="4"><i>nil</i></td><td>name*</td></tr>
	<tr><td>length*</td></tr>
	<tr><td class='clr1'>address(load)*</td></tr>
	<tr><td class='clr1'>address(save)*</td></tr>
	<tr><th rowspan='8'><code>70</code></th><th rowspan='8'>audio</th><td rowspan="2">ch1asdr*</td><td>ch1vol</td></tr>
	<tr><td class='clr1'>ch1pitch</td></tr>
	<tr><td rowspan="2">ch2asdr*</td><td>ch2vol</td></tr>
	<tr><td class='clr1'>ch2pitch</td></tr>
	<tr><td rowspan="2">ch3asdr*</td><td>ch3vol</td></tr>
	<tr><td class='clr1'>ch3pitch</td></tr>
	<tr><td rowspan="2">ch4asdr*</td><td>ch4vol</td></tr>
	<tr><td class='clr1'>ch4pitch</td></tr>
	<tr><th rowspan='3'><code>80</code></th><th rowspan='3'>midi</th><td>devicer</td><td>devicew</td></tr>
	<tr><td>byte1</td><td>byte1</td></tr>
	<tr><td>byte2</td><td>byte2</td></tr>
	<tr><th rowspan='8'><code>90</code></th><th rowspan='8'>datetime</th><td>year</td><td class='clr1'>refresh</td></tr>
	<tr><td>month</td><td rowspan="7"></td></tr>
	<tr><td>day</td></tr>
	<tr><td>hour</td></tr>
	<tr><td>minute</td></tr>
	<tr><td>second</td></tr>
	<tr><td>doty</td></tr>
	<tr><td>dotw</td></tr>
	<tr><th rowspan='4'><code>f0</code></th><th rowspan='4'>system</th><td>reset*</td><td class='clr1'>red*</td></tr>
	<tr><td>frame*</td><td class='clr1'>green*</td></tr>
	<tr><td>error*</td><td class='clr1'>blue*</td></tr>
</table>

year 2 month 1 day 1 hour 1 minute 1 second 1 dow 1 doy 2 isdst 1 get 1

<h3>Controller</h3>

<p>A device that works like a NES controller, each button is a bit from a single byte(<code>ff30</code>). To check if the up button is pressed:</p>

<pre>
,no-up ~dev/ctrl.buttons #f0 AND #10 NEQ JMP? POP2
	( handle when up is pressed )
@no-up
</pre>

<table border='1'>
	<tr><td><code>0x01</code></td><td>Ctrl</td><td><code>0x10</code></td><td>Up</td></tr>
	<tr><td><code>0x02</code></td><td>Alt</td><td><code>0x20</code></td><td>Down</td></tr>
	<tr><td><code>0x04</code></td><td>Backspace</td><td><code>0x40</code></td><td>Left</td></tr>
	<tr><td><code>0x08</code></td><td>Return</td><td><code>0x80</code></td><td>Right</td></tr>
</table>

<h3>Sprite Engine</h3>

<p>Uxn's sprite device makes it easier to draw characters and icons to the screen by sending a memory address, a position and a color byte.</p>

<p>The sprite device's color byte defines the layer to draw on, the type of data to draw, and the colors to use.</p>

<table border='1'>
	<tr><th colspan='3'>high nibble</th><th colspan='6'>low nibble(icn)</th></tr>
	<tr><th>0</th><td>bg</td><td rowspan='2'>icn</td><th>0</th><td class='clr0' colspan='2'>0</td><th>8</th><td class='clr0'>0</td><td class='clr2'>2</td></tr></tr>
	<tr><th>1</th><td>fg</td><th>1</th><td class='clr1'>1</td><td class='clr0'>0</td><th>9</th><td class='clr1'>1</td><td class='clr2'>2</td></tr></tr>
	<tr><th>2</th><td>bg</td><td rowspan='2'>chr</td><th>2</th><td class='clr2'>2</td><td class='clr0'>0</td><th>a</th><td class='clr2' colspan='2'>2</td></tr></tr>
	<tr><th>3</th><td>fg</td><th>3</th><td class='clr3'>3</td><td class='clr0'>0</td><th>b</th><td class='clr3'>3</td><td class='clr2'>2</td></tr></tr>
	<tr><th>4</th><th></th><th></th><th>4</th><td class='clr0'>0</td><td class='clr1'>1</td><th>c</th><td class='clr0'>0</td><td class='clr3'>3</td></tr></tr>
	<tr><th>5</th><th></th><th></th><th>5</th><td class='clr1' colspan='2'>1</td><th>d</th><td class='clr1'>1</td><td class='clr3'>3</td></tr></tr>
	<tr><th>6</th><th></th><th></th><th>6</th><td class='clr2'>2</td><td class='clr1'>1</td><th>e</th><td class='clr2'>2</td><td class='clr3'>3</td></tr></tr>
	<tr><th>7</th><th></th><th></th><th>7</th><td class='clr3'>3</td><td class='clr1'>1</td><th>f</th><td class='clr3' colspan='2'>3</td></tr></tr>
</table>

<h3>Audio Engine</h3>

<p>More details shortly.</p>

<style>
.clr0 { background:white; color:black; }
.clr1 { background:black; color:white; }
.clr2 { background:#72dec2; color:white; }
.clr3 { background:#ff0000; color:black; }
</style>

<img src='../media/identity/uxn64.png' />
