<h3>Compile</h3>

<p>To convert source to an executable binary one uses a compiler. My compiler of choice is {https://bellard.org/tcc tcc}, but more generally <code>gcc</code> is what most toolchains will use on {Linux}.</p>

<pre>cc -Wall -o main main.c</pre>

<pre>
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;

int count = 10;

int add_together(int x, int y) {
  int result = x + y;
  return result;
}

typedef struct {
  int x;
  int y;
  int z;
} point;

void print_point(point point) {
  printf("the point is: (%d,%d,%d)\n",point.x,point.y,point.z);
}

int main(int argc, char** argv) {
  point p;
  p.x = 2;
  p.y = 3;
  p.z = 4;

  float length = sqrt(p.x * p.x + p.y * p.y);

  printf("float: %.6f\n", length);
  printf("int: %d\n", p.z);

  print_point(p);

  return 0;
}
</pre>

<h3>Include</h3>

<p>Generally, projects will include <code>.h</code> files which in turn will include their own <code>.c</code> files. The following form is used for system header files. It searches for a file named <code>file</code> in a standard list of system directories. </p>

<pre>#include &lt;file&gt;</pre>

<p>The following form is used for header files of your own program. It searches for a file named <code>folder/file.h</code> in the directory containing the current file. </p>

<pre>#include "folder/file.h"</pre>

<h3>Midi</h3>

<pre>cc -std=c89 -Wall midi.c -o midi</pre>

<p>Play note <code>G</code> with velocity of <code>64</code>.</p>

<pre>
#include &lt;linux/soundcard.h&gt;
#include &lt;unistd.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int
error(char* msg, const char* err)
{
  printf("Error %s: %s\n", msg, err);
  return 0;
}

int
main(void)
{
  char* device = "/dev/midi2";
  unsigned char g_on[3] = {0x90, 0x43, 0x40};
  unsigned char g_off[3] = {0x80, 0x43, 0x00};
  int f = open(device, O_WRONLY, 0);
  if(f < 0)
    return error("Unknown", device);
  printf("Note ON\n");
  if(!write(f, g_on, sizeof(g_on)))
    return error("Note", "ON");
  sleep(2);
  printf("Note OFF\n");
  if(!write(f, g_off, sizeof(g_off)))
    return error("Note", "OFF");
  close(f);
  return 0;
}

</pre>

<h3>Data Types</h3>

<table border='1'>
  <tr><td>char</td><td>0xff</td><td>0-255</td></tr>
  <tr><td>short</td><td>0xffff</td><td>0-65535</td></tr>
</table>

<h3>IO</h3>

<p>One way to get input into a program or to display output from a program is to use standard input and standard output, respectively. The following two programs can be used with the unix pipe <code>./o | ./i</code></p>

<h4>o.c</h4>
<pre>
#include &lt;stdio.h&gt;

int
main()
{
  printf("(output hello)");
  return 0;
}
</pre>

<h4>i.c</h4>

<pre>
#include &lt;stdio.h&gt;

int
main()
{
  char line[256];
  if(fgets(line, 256, stdin) != NULL) {
    printf("(input: %s)\n", line);
  }
  return 0;
}
</pre>

<h3>SDL</h3>

<pre>cc demo.c -I/usr/local/include -L/usr/local/lib -lSDL2 -o demo</pre>

<p>To compile the following example, place a <code>graphic.bmp</code> file in the same location as the c file, or remove the image block.</p>

<pre>
#include &lt;SDL2/SDL.h&gt;
#include &lt;stdio.h&gt;

int
error(char* msg, const char* err)
{
  printf("Error %s: %s\n", msg, err);
  return 1;
}

int
main()
{
  SDL_Window* window = NULL;
  SDL_Surface* surface = NULL;
  SDL_Surface* image = NULL;

  if(SDL_Init(SDL_INIT_VIDEO) < 0)
    return error("init", SDL_GetError());

  window = SDL_CreateWindow("Blank Window",
                            SDL_WINDOWPOS_UNDEFINED,
                            SDL_WINDOWPOS_UNDEFINED,
                            640,
                            480,
                            SDL_WINDOW_SHOWN);

  if(window == NULL)
    return error("window", SDL_GetError());

  surface = SDL_GetWindowSurface(window);
  SDL_FillRect(surface, NULL,
               SDL_MapRGB(surface->format, 0x72, 0xDE, 0xC2));

  /* Display an image */
  image = SDL_LoadBMP("graphic.bmp");

  if(image == NULL)
    return error("image", SDL_GetError());

  SDL_BlitSurface(image, NULL, surface, NULL);

  /* Draw canvas */
  SDL_UpdateWindowSurface(window);
  SDL_Delay(2000);

  /* close */
  SDL_FreeSurface(surface);
  surface = NULL;
  SDL_DestroyWindow(window);
  window = NULL;
  SDL_Quit();

  return 0;
}

</pre>

<h3>Misc</h3>

<p>String padding: <code>|Hello     |</code></p>

<pre>
printf("|%-10s|", "Hello");
</pre>

<h3>Macros</h3>

<pre>
#define MIN(a, b)  (((a) < (b)) ? (a) : (b))
#define MAX(a, b)  (((a) > (b)) ? (a) : (b))
#define ABS(a)     (((a) < 0) ? -(a) : (a))
#define CLAMP(x, low, high)  (((x) > (high)) ? (high) : (((x) < (low)) ? (low) : (x)))
</pre>

<h2>Reserved Words</h2>

<table border='1'>
  <tr><td><code>auto</code></td><td><code>else</code></td><td><code>long</code></td><td><code>switch</code></td></tr>
  <tr><td><code>break</code></td><td><code>enum</code></td><td><code>register</code></td><td><code>typedef</code></td></tr>
  <tr><td><code>case</code></td><td><code>extern</code></td><td><code>return</code></td><td><code>union</code></td></tr>
  <tr><td><code>char</code></td><td><code>float</code></td><td><code>short</code></td><td><code>unsigned</code></td></tr>
  <tr><td><code>const</code></td><td><code>for</code></td><td><code>signed</code></td><td><code>void</code></td></tr>
  <tr><td><code>continue</code></td><td><code>goto</code></td><td><code>sizeof</code></td><td><code>volatile</code></td></tr>
  <tr><td><code>default</code></td><td><code>if</code></td><td><code>static</code></td><td><code>while</code></td></tr>
  <tr><td><code>do</code></td><td><code>int</code></td><td><code>struct</code></td><td><code>_Packed</code></td></tr>
  <tr><td><code>double</code></td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
</table>

<!--

• is, to, str, mem, wcs, atomic_, memory_,
                      | memory_order_, cnd_, mtx_, thrd_, or tss_
                      | followed by a lowercase letter
04:16:26     neauoire | it was useful.. to set modes
04:16:27        @cncl | • E, FE_, LC_, SIG, SIG_, ATOMIC_, or TIME_
                      | followed by an uppercase letter
04:16:29        @cncl | • E followed by a number
04:16:31        @cncl | • PRN or SCN followed by a lowercase letter or
                      | the uppercase letter X
04:16:33        @cncl | • Identifiers starting with uint or int and
                      | ending with _t, or UINT or INT and ending with
                      | _MAX, _MIN, or _C
04:16:35        @cncl | • cerf, cerfc, cexp2, cexpm1, clog10, clog1p,
                      | clog2, clgamma, ctgamma, optionally followed by f
                      | or l
-->