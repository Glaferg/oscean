<h3>Arithmetic</h3>

<p>A pair of parentheses indicates one step of calculation. A function name comes after the open parenthesis followed by arguments. Tokens are reparated by spaces, tabs and newlines. </p>

<pre>(/ (* (+ 2 3) (- 5 3)) 2) </pre>

<p>Other included arithmetic operators are:</p>

<table border="1">
	<tr><td>quotient</td><td>sin</td><td>exp</td><td>asin</td></tr> 
	<tr><td>remainder</td><td>cos</td><td>log</td><td>acos</td></tr> 
	<tr><td>modulo</td><td>tan</td><td>sqrt</td><td>atan</td></tr> 
</table>

<h3>Variables</h3>

<p>To define a variable, use <code>define</code>, to print the value of an expression, use <code>display</code>.</p>

<pre>
(define color "red")
(display color)
</pre>

<h3>Functions</h3>

<p>To define a function, use <code>define</code>, to add parameters to the function, use <code>lambda</code>. The following functions can thereafter be used like <code>(greet "Alex")</code>.</p>

<pre>
(define greet (lambda (name)
	(string-append "Hello " name "!")))
</pre>

<p>Another example:</p>

<pre>
(define add-three (lambda (a b c)
	(+ a b c)))
</pre>

<p>The previous example can also be defined using the following short-form:</p>

<pre>
(define (add-three a b c)
	(+ a b c))
</pre>

<h3>List</h3>

<p>You can create a list of items, and access items in the list by id:</p>

<pre>
(define colors 
	(list red yellow green cyan))
(list-ref colors 2) ; yellow
</pre>

<h3>Logic</h3>

<p>Logic operations are in the format of <code>(if true this that)</code> where the result of the operation will be <code>this</code> if the second parameter is <code>true</code>, otherwise will be <code>that</code>. In Scheme, true is indicated as <code>#t</code>, and falseis indicated as <code>#f</code>.</p>

<pre>
(define (min a b) 
	(if (< a b) a b))
</pre>

<h4>Compare</h4>

<table border="1">
	<tr><th><code>eq?</code></th><td>Compares addresses of two objects and returns #t if they are same.</td></tr>
	<tr><th><code>eqv?</code></th><td>Compares types and values of two object stored in the memory space and returns #t if they are same.</td></tr>
	<tr><th><code>equal?</code></th><td>Compares sequences such as list or string and returns #t if they are same.</td></tr>
</table>