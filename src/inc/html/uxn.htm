<h2>Memory</h2>

<table border='1'>
	<tr><th rowspan='4'>Core</th><td>Program Counter</td><td>1 short</td></tr>
	<tr><td>Literal Counter</td><td>1 byte</td></tr>
	<tr><td>Balance Counter</td><td>1 byte</td></tr>
	<tr><td>Status Register</td><td>1 byte</td></tr>
	<tr><th rowspan='2'>Stacks</th><td>Working Stack</td><td>256 bytes</td></tr>
	<tr><td>Return Stack</td><td>256 bytes</td></tr>
	<tr><th>Memory</th><td>RAM</td><td>65536 bytes</td></tr>
</table>

<h3>Status Register</h3>

<p>The status register is distributed as follows, it shares the same byte as the register selector. The <b>halt</b> flag is used by the BRK instruction is stops the cpu, the <b>short</b> flag is used for 16-bits operations, the <b>cond</b> flag is set when an instruction requires a non-zero stack value to operate, and the <b>sign</b> flag is set when the operator should use signed integers.</p>

<pre>
T C S H
| | | +---- Halt  0x01
| | +------ Short 0x02
| +-------- Sign  0x04
+---------- Cond  0x08
</pre>

<h3>Return Stack</h3>

<p>The CPU can tunnel through 128 subroutines and find its way back with the return stack, the opcode to jump into to a subroutine is <code>JSR</code>, the opcode to return from a subroutine is <code>RTS</code>. An item on the work stack can be temporarily sent to the return stack with <code>WSR</code> and returned with <code>RSW</code>.</p>

<h2>Opcodes</h2>

<p>There are 32 opcodes, each opcode occupies 5 bits of a byte, the remaining 3 are used to select the addressing mode of the values in the stack.</p>

<table border='1'>
	<tr><td colspan='3'>mode</td><td colspan='5'>opcode</td></tr>
	<tr><td>cond</td><td>sign</td><td>short</td><td>0</td><td>0</td><td>0</td><td>0</td></tr>
</table>

<p>Opcodes pointing to an address in memory can pull 16-bits(2 bytes) from the stack at a time to form an address like <code>[a b]</code>, where the a and b bytes are combined. For example, <code>[0xAB 0xCD]</code> points to the memory address <code>0xABCD</code>. When used a single byte, these operators point to a relative address.</p>

<table border='1'>
	<tr><td></td><th colspan='3'>I/O</th><td></td>                      <th colspan='3'>Stack</th></tr>
	<tr><th>0x00</th><td><code>BRK</code></td><td></td><td></td>        <th>0x10</th><td><code>POP</code></td><td>a</td><td></td></tr>
	<tr><th>0x01</th><td><code>NOP</code></td><td></td><td></td>        <th>0x11</th><td><code>DUP</code></td><td>a</td><td>a a</td></tr>
	<tr><th>0x02</th><td><code>LIT</code></td><td></td><td>lc</td>      <th>0x12</th><td><code>SWP</code></td><td>a b</td><td>b a</td></tr>
	<tr><th>0x03</th><td><code>JMP</code></td><td>[a b]</td><td></td>   <th>0x13</th><td><code>OVR</code></td><td>a b c</td><td>a b a</td></tr>
	<tr><th>0x04</th><td><code>JSR</code></td><td>[a b]</td><td>rs</td> <th>0x14</th><td><code>ROT</code></td><td>a b c</td><td>b c a</td></tr>
	<tr><th>0x05</th><td><code>RTS</code></td><td></td><td>rs</td>      <th>0x15</th><td><code>---</code></td><td></td><td></td></tr>
	<tr><th>0x06</th><td><code>LDR</code></td><td>[a b]</td><td>c</td>  <th>0x16</th><td><code>WSR</code></td><td>a</td><td>rs</td></tr>
	<tr><th>0x07</th><td><code>STR</code></td><td>a [b c]</td><td></td> <th>0x17</th><td><code>RSW</code></td><td>rs</td><td>a</td></tr>
	<tr><td></td><th colspan='3'>Logic</th><td></td>                    <th colspan='3'>Arithmetic</th></tr>
	<tr><th>0x08</th><td><code>---</code></td><td></td><td></td>        <th>0x18</th><td><code>ADD</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x09</th><td><code>---</code></td><td></td><td></td>        <th>0x19</th><td><code>SUB</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x0a</th><td><code>---</code></td><td></td><td></td>        <th>0x1a</th><td><code>MUL</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x0b</th><td><code>---</code></td><td></td><td></td>        <th>0x1b</th><td><code>DIV</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x0c</th><td><code>AND</code></td><td>a b</td><td>c</td>    <th>0x1c</th><td><code>EQU</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x0d</th><td><code>XOR</code></td><td>a b</td><td>c</td>    <th>0x1d</th><td><code>NEQ</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x0e</th><td><code>ROL</code></td><td>a b</td><td>c</td>    <th>0x1e</th><td><code>LTH</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x0f</th><td><code>ROR</code></td><td>a b</td><td>c</td>    <th>0x1f</th><td><code>GTH</code></td><td>a b</td><td>c</td></tr>
</table>

<p><code>lc</code> stands for <i>literal counter</i>, <code>rs</code> for <i>return stack</i>, <code>mp</code> stands for <i>memory pointer</i>.</p>

<style>
.clr0 { background:white; color:black; }
.clr1 { background:black; color:white; }
.clr2 { background:#72dec2; color:white; }
.clr3 { background:#ff0000; color:black; }
</style>

<img src='../media/identity/uxn64.png' />
