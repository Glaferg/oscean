<h3>Memory</h3>

<table border='1'>
	<tr><th rowspan='3'>Core</th><td>Program Counter</td><td>1 short</td></tr>
	<tr><td>Literal Counter</td><td>1 byte</td></tr>
	<tr><td>Status Register</td><td>1 byte</td></tr>
	<tr><th rowspan='2'>Stacks</th><td>Working Stack</td><td>256 bytes</td></tr>
	<tr><td>Return Stack</td><td>256 bytes</td></tr>
	<tr><th rowspan='2'>Memory</th><td>ROM</td><td>65536 bytes</td></tr>
	<tr><td>RAM</td><td>65536 bytes</td></tr>
</table>

<h3>Status Register</h3>

<p>The status register is distributed as follows, it shares the same byte as the register selector. The <b>halt</b> flag is used by the BRK instruction is stops the cpu, the <b>short</b> flag is used for 16 operations, the <b>carry</b> flag is set when an instruction carries over the 8bit range and the <b>traps</b> flag is set when the pointer should be sent to the traps location(in IO operations).</p>

<pre>
T C S H
| | | +---- Halt  0x01
| | +------ Short 0x02
| +-------- Carry 0x04
+---------- Traps 0x08
</pre>

<h3>Return Stack</h3>

<p>The CPU can tunnel through 256 subroutines and find its way back with the return stack, the opcodes to jump into to a subroutine are <code>JSR</code> and <code>JEQ</code> the opcode to leave a subroutine is <code>RTS</code>.</p>

<h2>Opcodes</h2>

<p>There are 32 opcodes, each opcode occupies 5 bits of a byte, the remaining 3 are used to select the addressing mode of the values in the stack.</p>

<table border='1'>
	<tr><td colspan='3'>addressing</td><td colspan='5'>opcode</td></tr>
	<tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr>
</table>

<p>Opcodes pointing to addresses in memory pull 16-bits from the stack at a time, and are represented like <code>[a b]</code>, where the a and b bytes are combined into a short. For example, <code>[0xAB 0xCD]</code> points to the memory address <code>0xABCD</code>.</p>

<table border='1'>
	<tr><td></td><th colspan='3'>I/O</th><td></td>                           <th colspan='3'>Stack^</th></tr>
	<tr><th>0x00</th><td><code>BRK</code></td><td></td><td></td>             <th>0x10</th><td><code>POP</code></td><td>a</td><td></td></tr>
	<tr><th>0x01</th><td><code>LIT</code></td><td></td><td>lc</td>           <th>0x11</th><td><code>DUP</code></td><td>a</td><td>a a</td></tr>
	<tr><th>0x02</th><td><code>---</code></td><td></td><td></td>             <th>0x12</th><td><code>SWP</code></td><td>a b</td><td>b a</td></tr>
	<tr><th>0x03</th><td><code>---</code></td><td></td><td></td>             <th>0x13</th><td><code>OVR</code></td><td>a b c</td><td>a b a</td></tr>
	<tr><th>0x04</th><td><code>---</code></td><td></td><td></td>             <th>0x14</th><td><code>ROT</code></td><td>a b c</td><td>b c a</td></tr>
	<tr><th>0x05</th><td><code>---</code></td><td></td><td></td>             <th>0x15</th><td><code>AND</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x06</th><td><code>LDR</code></td><td>[a b]</td><td>c</td>       <th>0x16</th><td><code>ORA</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x07</th><td><code>STR</code></td><td>a [b c]</td><td></td>      <th>0x17</th><td><code>ROL</code></td><td>a b</td><td>c</td></tr>
	<tr><td></td><th colspan='3'>Logic</th><td></td>                         <th colspan='3'>Arithmetic^</th></tr>
	<tr><th>0x08</th><td><code>JMU</code></td><td>[a b]</td><td>mp</td>      <th>0x18</th><td><code>ADD</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x09</th><td><code>JMC</code></td><td>[a b] c</td><td>mp</td>    <th>0x19</th><td><code>SUB</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x0a</th><td><code>JSU</code></td><td>[a b]</td><td>mp rs</td>   <th>0x1a</th><td><code>MUL</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x0b</th><td><code>JSC</code></td><td>[a b] c</td><td>mp rs</td><th>0x1b</th><td><code>DIV</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x0c</th><td><code>RTU</code></td><td></td><td>rs</td>           <th>0x1c</th><td><code>EQU</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x0d</th><td><code>RTC</code></td><td>a</td><td>rs</td>          <th>0x1d</th><td><code>NEQ</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x0e</th><td><code>---</code></td><td></td><td></td>             <th>0x1e</th><td><code>LTH</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x0f</th><td><code>---</code></td><td></td><td></td>             <th>0x1f</th><td><code>GTH</code></td><td>a b</td><td>c</td></tr>
</table>

<p><code>sf</code> stands for <i>sflag</i>, <code>lc</code> for <i>literal counter</i>, <code>rs</code> for <i>return stack</i>, <code>mp</code> stands for <i>memroy pointer</i>.</p>

<h2>Uxmasm</h2>

<p>Here is an example of the assembly language where <code>0x03</code> and <code>0x02</code> are added the stack, and added to each other - The resulting value on the stack is compared against <code>0x05</code> and jumps to the label <code>here</code> if is it.</p>

<pre>
( hello world )

;iterator
:dev1r FFF0
:dev1w FFF1

|0100 @RESET

@word1 "hello_word ( len: 0x0b )

@loop
	,dev1w STR ( write to stdout )
	,incr JSU ( increment itr )
	,word1 ,strlen JSU ( get strlen )
	NEQ ,loop ROT JSC ( loop != strlen )

BRK

@strlen
	,0001 ADD^ PEK
	RTS

@incr
	,iterator LDR
	,01 ADD
	,iterator STR 
	,iterator LDR
	RTS

|c000 @FRAME BRK 
|d000 @ERROR BRK 
|FFFA .RESET .FRAME .ERROR
</pre>

<table border='1'>
	<tr><th><code>ADD^</code></th><td>Sets sf(16-bits mode)</td><td>,1234 ,0001 ADD^ -> 1235</td></tr>
</table>

<h3>Literal mode</h3>
<p>Each operation is 1 byte(8 bits). To differenciate operations from numbers, the <code>LIT</code>(<code>0x02</code>) opcode toggles the literal mode for a length of time based dictated by the value of the byte follows it.</p>

<table border='1'>
	<tr><th><code>,12</code></th><td><code>0x02 0x01 0x12</code></td></tr>
	<tr><th><code>.23</code></th><td><code>0x23</code></td></tr>
	<tr><th><code>,abcd</code></th><td><code>0x02 0x02 0xab 0xcd</code></td></tr>
	<tr><th><code>.abcd</code></th><td><code>0xab 0xcd</code></td></tr>
</table>