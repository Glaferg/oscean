<h2>Memory</h2>

<table border='1'>
	<tr><th rowspan='3'>Core</th><td>Program Counter</td><td>1 short</td></tr>
	<tr><td>Literal Counter</td><td>1 byte</td></tr>
	<tr><td>Status Register</td><td>1 byte</td></tr>
	<tr><th rowspan='2'>Stacks</th><td>Working Stack</td><td>256 bytes</td></tr>
	<tr><td>Return Stack</td><td>256 bytes</td></tr>
	<tr><th>Memory</th><td>RAM</td><td>65536 bytes</td></tr>
</table>

<h3>Status Register</h3>

<p>The status register is distributed as follows, it shares the same byte as the register selector. The <b>halt</b> flag is used by the BRK instruction is stops the cpu, the <b>short</b> flag is used for 16 operations, the <b>cond</b> flag is set when an instruction requires a non-zero stack value to operate, and the <b>sign</b> flag is set when the operator should use signed integers.</p>

<pre>
T C S H
| | | +---- Halt  0x01
| | +------ Short 0x02
| +-------- Sign  0x04
+---------- Cond  0x08
</pre>

<h3>Special Addresses</h3>

<p>Addresses at the end of the memory are used to keep various entry points into the program. The reset vector is run once, the frame vector is run each frame, and the error vector is run once when an error has occured.</p>

<table border='1'>
	<tr><th rowspan="2">Ports</th><td><code>fff8</code></td><td>Input Device</td></tr>
	<tr><td><code>fff9</code></td><td>Output Device</td></tr>
	<tr><th rowspan="3">Vectors</th><td><code>fffa-fffb</code></td><td>Reset</td></tr>
	<tr><td><code>fffc-fffd</code></td><td>Frame</td></tr>
	<tr><td><code>fffe-ffff</code></td><td>Error</td></tr>
</table>

<h3>Return Stack</h3>

<p>The CPU can tunnel through 128 subroutines and find its way back with the return stack, the opcode to jump into to a subroutine is <code>JSR</code>, the opcode to return from a subroutine is <code>RTS</code>.</p>

<h2>Opcodes</h2>

<p>There are 32 opcodes, each opcode occupies 5 bits of a byte, the remaining 3 are used to select the addressing mode of the values in the stack.</p>

<table border='1'>
	<tr><td colspan='3'>mode</td><td colspan='5'>opcode</td></tr>
	<tr><td>cond</td><td>sign</td><td>short</td><td>0</td><td>0</td><td>0</td><td>0</td></tr>
</table>

<p>Opcodes pointing to addresses in memory pull 16-bits from the stack at a time, and are represented like <code>[a b]</code>, where the a and b bytes are combined into a short. For example, <code>[0xAB 0xCD]</code> points to the memory address <code>0xABCD</code>.</p>

<table border='1'>
	<tr><td></td><th colspan='3'>I/O</th><td></td>                      <th colspan='3'>Stack^</th></tr>
	<tr><th>0x00</th><td><code>BRK</code></td><td></td><td></td>        <th>0x10</th><td><code>POP</code></td><td>a</td><td></td></tr>
	<tr><th>0x01</th><td><code>NOP</code></td><td></td><td></td>        <th>0x11</th><td><code>DUP</code></td><td>a</td><td>a a</td></tr>
	<tr><th>0x02</th><td><code>LI1</code></td><td></td><td>lc</td>      <th>0x12</th><td><code>SWP</code></td><td>a b</td><td>b a</td></tr>
	<tr><th>0x03</th><td><code>LIX</code></td><td></td><td>lc</td>      <th>0x13</th><td><code>OVR</code></td><td>a b c</td><td>a b a</td></tr>
	<tr><th>0x04</th><td><code>IOR</code></td><td>a</td><td>b</td>      <th>0x14</th><td><code>ROT</code></td><td>a b c</td><td>b c a</td></tr>
	<tr><th>0x05</th><td><code>IOW</code></td><td>a</td><td></td>       <th>0x15</th><td><code>AND</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x06</th><td><code>LDR</code></td><td>[a b]</td><td>c</td>  <th>0x16</th><td><code>ORA</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x07</th><td><code>STR</code></td><td>a [b c]</td><td></td> <th>0x17</th><td><code>ROL</code></td><td>a b</td><td>c</td></tr>
	<tr><td></td><th colspan='3'>Logic</th><td></td>                    <th colspan='3'>Arithmetic^</th></tr>
	<tr><th>0x08</th><td><code>JMP</code></td><td>[a b]</td><td>mp</td> <th>0x18</th><td><code>ADD</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x09</th><td><code>JSR</code></td><td>[a b]</td><td>mp</td> <th>0x19</th><td><code>SUB</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x0a</th><td><code>RTI</code></td><td></td><td>mp rs</td>   <th>0x1a</th><td><code>MUL</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x0b</th><td><code>RTS</code></td><td></td><td>mp rs</td>   <th>0x1b</th><td><code>DIV</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x0c</th><td><code>---</code></td><td></td><td></td>        <th>0x1c</th><td><code>EQU</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x0d</th><td><code>---</code></td><td></td><td></td>        <th>0x1d</th><td><code>NEQ</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x0e</th><td><code>---</code></td><td></td><td></td>        <th>0x1e</th><td><code>LTH</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x0f</th><td><code>---</code></td><td></td><td></td>        <th>0x1f</th><td><code>GTH</code></td><td>a b</td><td>c</td></tr>
</table>

<p><code>lc</code> stands for <i>literal counter</i>, <code>rs</code> for <i>return stack</i>, <code>mp</code> stands for <i>memory pointer</i>.</p>

<h2>Uxmasm</h2>

<p>Here is an example of the assembly language that prints <code>hello world</code> to stdout.</p>

<pre>
( a comment )

:dev/w fff9 ( const named dev/w with value 0xfff9 )
;i 1 ( var iterator, length 1 byte )

|0100 @RESET

	,00 ,dev/w STR ( set dev/write to console ) 

	@word1 "hello_world ( len: 0x0b )

	@loop
		IOW ( write to device#0 )
		,incr JSR ( increment itr )
		,i LDR ( a = i )
		,word1 ,strlen JSR ( b = string length )
		NEQ ,loop ROT JSR? ( a != b ? loop )

BRK

@strlen ,0001 ADD^ LDR RTS
@incr ,i LDR ,01 ADD ,i STR RTS

|c000 @FRAME BRK 
|d000 @ERROR BRK 
|FFFA .RESET .FRAME .ERROR
</pre>

<h3>Literal mode</h3>
<p>Each operation is 1 byte(8 bits). To differentiate operations from numbers, the <code>LI1</code> opcode toggles the literal mode for a length of 1 tick, the <code>LIX</code> opcode toggles the literal mode for the number of ticks dictated by the value of the byte that follows it. For example, the assembly code <code>,abcd</code>, is equivalent to <code>LIX .02 .abcd</code>.</p>

<table border='1'>
	<tr><th><code>assembly</code></th><td><code>bytecode</code></td></tr>
	<tr><th><code>,12</code></th><td><code>0x02 0x12</code></td></tr>
	<tr><th><code>.23</code></th><td><code>0x23</code></td></tr>
	<tr><th><code>,abcd</code></th><td><code>0x03 0x02 0xab 0xcd</code></td></tr>
	<tr><th><code>.abcd</code></th><td><code>0xab 0xcd</code></td></tr>
</table>

<h3>Short mode</h3>
<p>Operations can be used on 16-bits at a time(2 bytes), by using the <code>SHORT^</code> mode.</p>

<table border='1'>
	<tr><th>Stack</th><th>Operation</th></tr>
	<tr><td><code>0x12 0x34 0x56 0x78</code></td><td>SWP^</td></tr>
	<tr><td><code>0x56 0x78 0x12 0x34</code></td><td>ADD^</td></tr>
	<tr><td><code>0x68 0xac</code></td><td></td></tr>
</table>

<h3>Conditional mode</h3>
<p>Every operation has the potential to conditionally operate by using the <code>COND?</code> mode, in the following branching example, the value <code>0xff</code> will be added to the stack if the first value is greater than the second, otherwise <code>0xee</code> will be added.</p>
<p><code>ROT</code> is used to bring the result of <code>GTH</code> to the top of the stack, <code>POP^</code> is used after the conditional <code>JMP</code> to remove the address of the label <code>@there</code> that is left on the stack.</p>

<pre>
,06 ,05 GTH ,there ROT JMP? POP^

@here ( when lesser or equal )
	,ee
	BRK

@there ( when greater )
	,ff
	BRK
</pre>

<h3>Devices</h3>

<p>There is a maximum of 256 devices accessible to the two I/0 operators <code>IOR</code>(read) and <code>IOW</code>(write) used to interface with devices, such as the screen, the mouse, the keyboard, etc. To read or write from a specific device, the input port(fff8) and output port(fff9) bytes have to be assigned in memory.</p>

<pre>
( draw pixel )

:dev/w fff9 ( keep write port in a const )
;x 2
;y 2

|0100 @RESET
	
	( set dev/write to screen ) 

	,01 ,dev/w STR 

	,0020 ,x STR^ ( set x-pos )
	,0030 ,y STR^ ( set y-pos )

	( IOW will now send to screen ) 

	,y LDR^ IOW^ ( y-pos )
	,x LDR^ IOW^ ( x-pos )
	,02 IOW ( color )
	,01 IOW ( redraw )

BRK

|c000 @FRAME BRK 
|d000 @ERROR BRK 
|FFFA .RESET .FRAME .ERROR
</pre>