<h2>Memory</h2>

<table border='1'>
	<tr><th rowspan='4'>Core</th><td>Program Counter</td><td>1 short</td></tr>
	<tr><td>Literal Counter</td><td>1 byte</td></tr>
	<tr><td>Balance Counter</td><td>1 byte</td></tr>
	<tr><td>Status Register</td><td>1 byte</td></tr>
	<tr><th rowspan='2'>Stacks</th><td>Working Stack</td><td>256 bytes</td></tr>
	<tr><td>Return Stack</td><td>256 bytes</td></tr>
	<tr><th>Memory</th><td>RAM</td><td>65536 bytes</td></tr>
</table>

<h3>Status Register</h3>

<p>The status register is distributed as follows, it shares the same byte as the register selector. The <b>halt</b> flag is used by the BRK instruction is stops the cpu, the <b>short</b> flag is used for 16-bits operations, the <b>cond</b> flag is set when an instruction requires a non-zero stack value to operate, and the <b>sign</b> flag is set when the operator should use signed integers.</p>

<pre>
T C S H
| | | +---- Halt  0x01
| | +------ Short 0x02
| +-------- Sign  0x04
+---------- Cond  0x08
</pre>

<h3>Return Stack</h3>

<p>The CPU can tunnel through 128 subroutines and find its way back with the return stack, the opcode to jump into to a subroutine is <code>JSR</code>, the opcode to return from a subroutine is <code>RTS</code>. An item on the work stack can be temporarily sent to the return stack with <code>WSR</code> and returned with <code>RSW</code>. Uxn will automatically keep a count of the items that were moved from one stack to the other, the program will halt if trying to return or jump to a subroutine before all the items transferered have been returned. </p>

<h2>Opcodes</h2>

<p>There are 32 opcodes, each opcode occupies 5 bits of a byte, the remaining 3 are used to select the addressing mode of the values in the stack.</p>

<table border='1'>
	<tr><td colspan='3'>mode</td><td colspan='5'>opcode</td></tr>
	<tr><td>cond</td><td>sign</td><td>short</td><td>0</td><td>0</td><td>0</td><td>0</td></tr>
</table>

<p>Opcodes pointing to addresses in memory pull 16-bits from the stack at a time, and are represented like <code>[a b]</code>, where the a and b bytes are combined into a short. For example, <code>[0xAB 0xCD]</code> points to the memory address <code>0xABCD</code>.</p>

<table border='1'>
	<tr><td></td><th colspan='3'>I/O</th><td></td>                      <th colspan='3'>Stack</th></tr>
	<tr><th>0x00</th><td><code>BRK</code></td><td></td><td></td>        <th>0x10</th><td><code>POP</code></td><td>a</td><td></td></tr>
	<tr><th>0x01</th><td><code>---</code></td><td></td><td></td>        <th>0x11</th><td><code>DUP</code></td><td>a</td><td>a a</td></tr>
	<tr><th>0x02</th><td><code>LIT</code></td><td></td><td>lc</td>      <th>0x12</th><td><code>SWP</code></td><td>a b</td><td>b a</td></tr>
	<tr><th>0x03</th><td><code>---</code></td><td></td><td></td>        <th>0x13</th><td><code>OVR</code></td><td>a b c</td><td>a b a</td></tr>
	<tr><th>0x04</th><td><code>---</code></td><td></td><td></td>        <th>0x14</th><td><code>ROT</code></td><td>a b c</td><td>b c a</td></tr>
	<tr><th>0x05</th><td><code>---</code></td><td></td><td></td>        <th>0x15</th><td><code>---</code></td><td></td><td></td></tr>
	<tr><th>0x06</th><td><code>LDR</code></td><td>[a b]</td><td>c</td>  <th>0x16</th><td><code>WSR</code></td><td>a</td><td>rs</td></tr>
	<tr><th>0x07</th><td><code>STR</code></td><td>a [b c]</td><td></td> <th>0x17</th><td><code>RSW</code></td><td>rs</td><td>a</td></tr>
	<tr><td></td><th colspan='3'>Logic</th><td></td>                    <th colspan='3'>Arithmetic</th></tr>
	<tr><th>0x08</th><td><code>JMP</code></td><td>[a b]</td><td></td>   <th>0x18</th><td><code>ADD</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x09</th><td><code>JSR</code></td><td>[a b]</td><td>rs</td> <th>0x19</th><td><code>SUB</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x0a</th><td><code>---</code></td><td></td><td></td>        <th>0x1a</th><td><code>MUL</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x0b</th><td><code>RTS</code></td><td></td><td>rs</td>      <th>0x1b</th><td><code>DIV</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x0c</th><td><code>AND</code></td><td>a b</td><td>c</td>    <th>0x1c</th><td><code>EQU</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x0d</th><td><code>ORA</code></td><td>a b</td><td>c</td>    <th>0x1d</th><td><code>NEQ</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x0e</th><td><code>ROL</code></td><td>a b</td><td>c</td>    <th>0x1e</th><td><code>LTH</code></td><td>a b</td><td>c</td></tr>
	<tr><th>0x0f</th><td><code>ROR</code></td><td>a b</td><td>c</td>    <th>0x1f</th><td><code>GTH</code></td><td>a b</td><td>c</td></tr>
</table>

<p><code>lc</code> stands for <i>literal counter</i>, <code>rs</code> for <i>return stack</i>, <code>mp</code> stands for <i>memory pointer</i>.</p>

<h2>Uxmasm</h2>

<p>Here is an example of the assembly language that prints <code>hello world</code> to stdout.</p>

<pre>
( hello world )

&Console { pad 8 stdio 1 }

|0100 @RESET 
	
	,text1 ,print-label JSR ( print to console )

BRK

@print-label ( text )

	@cliloop
		DUP2 LDR =dev/console.stdio              ( write pointer value to console )
		#0001 ADD2                               ( increment string pointer )
		DUP2 LDR #00 NEQ ,cliloop ROT JMP? POP2  ( while *ptr!=0 goto loop )
	POP2
		
RTS                 

@text1 [ Hello World ] <1 .00 ( add text to memory, return 1 byte, add null byte )

|c000 @FRAME
|d000 @ERROR 

|FF00 ;dev/console Console

|FFF0 .RESET .FRAME .ERROR
|FFF8 [ f3f0 f30b f30a ] ( palette )
</pre>

<h3>Literal mode</h3>
<p>Each operation is 1 byte(8-bits). To differentiate operations from numbers, the <code>LIT</code> opcode toggles the literal mode for a length of 1 evaluation, the 16-bits mode <code>LIT2</code> opcode toggles the literal mode for the length of 2 frames.</p>

<table border='1'>
	<tr><th><code>assembly</code></th><td><code>bytecode</code></td></tr>
	<tr><th><code>,12</code></th><td><code>0x02 0x12</code></td></tr>
	<tr><th><code>.23</code></th><td><code>0x23</code></td></tr>
	<tr><th><code>,abcd</code></th><td><code>0x22 0xab 0xcd</code></td></tr>
	<tr><th><code>.abcd</code></th><td><code>0xab 0xcd</code></td></tr>
</table>

<h3>Short mode</h3>
<p>Operations can be used on 16-bits at a time(2 bytes), by using the <code>SHORT2</code> mode.</p>

<table border='1'>
	<tr><th>Stack</th><th>Operation</th></tr>
	<tr><td><code>0x12 0x34 0x56 0x78</code></td><td>SWP2</td></tr>
	<tr><td><code>0x56 0x78 0x12 0x34</code></td><td>ADD2</td></tr>
	<tr><td><code>0x68 0xac</code></td><td></td></tr>
</table>

<h3>Conditional mode</h3>
<p>Every operation has the potential to conditionally operate by using the <code>COND?</code> mode, in the following branching example, the value <code>0xff</code> will be added to the stack if the first value is greater than the second, otherwise <code>0xee</code> will be added.</p>
<p><code>ROT</code> is used to bring the result of <code>GTH</code> to the top of the stack, <code>POP2</code> is used after the conditional <code>JMP</code> to remove the address of the label <code>@there</code> that is left on the stack.</p>

<pre>
#06 #05 GTH ,there ROT JMP? POP2

@here ( when lesser or equal )
	#ee
	BRK

@there ( when greater )
	#ff
	BRK
</pre>

<h2>Devices</h2>

<p>There is a maximum of 8 devices accessible via the last page in memory, each device have 8 bytes to read from, and 8 bytes to write to. Devices are external systems to the Uxn code such as the screen, the mouse, the keyboard, etc. </p>

<table border='1'>
	<tr><th rowspan='2' colspan='2'>device</th><th colspan='2'>i/o</th></tr>
	<tr><th>read +0x00</th><th>write +0x08</th></tr>
	<tr><th><code>ff00</code></th><th>console</th><td><i>nil</i></td><td class='clr1'>stdout</td></tr>
	<tr><th rowspan='3'><code>ff10</code></th><th rowspan='3'>screen</th><td>width*</td><td>x*</td></tr>
	<tr><td>height*</td><td>y*</td></tr>
	<tr><td></td><td class='clr1'>color</td></tr>
	<tr><th rowspan='4'><code>ff20</code></th><th rowspan='4'>sprite</th><td>width*</td><td>x*</td></tr>
	<tr><td>height*</td><td>y*</td></tr>
	<tr><td></td><td>address*</td></tr>
	<tr><td></td><td class='clr1'>color</td></tr>
	<tr><th><code>ff30</code></th><th>controller</th><td>buttons byte</td><td><i>nil</i></td></tr>
	<tr><th><code>ff40</code></th><th>keyboard</th><td>key byte</td><td><i>nil</i></td></tr>
	<tr><th rowspan='4'><code>ff50</code></th><th rowspan='4'>mouse</th><td>x*</td><td rowspan="4"><i>nil</i></td></tr>
	<tr><td>y*</td></tr>
	<tr><td>button byte</td></tr>
	<tr><td>chord byte</td></tr>
	<tr><th rowspan='4'><code>fff0</code></th><th rowspan='4'>system</th><td>reset*</td><td class='clr1'>red*</td></tr>
	<tr><td>frame*</td><td class='clr1'>green*</td></tr>
	<tr><td>error*</td><td class='clr1'>blue*</td></tr>
</table>

<h3>Sprite Engine</h3>

<p>Uxn's sprite device makes it easier to draw characters and icons to the screen by sending a memory address, a position and a color byte.</p>

<p>The sprite device's color byte defines the layer to draw on, the type of data to draw, and the colors to use.</p>

<table border='1'>
	<tr><th colspan='3'>high nibble</th><th colspan='6'>low nibble(icn)</th></tr>
	<tr><th>0</th><td>bg</td><td rowspan='2'>icn</td><th>0</th><td class='clr0' colspan='2'>0</td><th>8</th><td class='clr0'>0</td><td class='clr2'>2</td></tr></tr>
	<tr><th>1</th><td>fg</td><th>1</th><td class='clr1'>1</td><td class='clr0'>0</td><th>9</th><td class='clr1'>1</td><td class='clr2'>2</td></tr></tr>
	<tr><th>2</th><td>bg</td><td rowspan='2'>chr</td><th>2</th><td class='clr2'>2</td><td class='clr0'>0</td><th>a</th><td class='clr2' colspan='2'>2</td></tr></tr>
	<tr><th>3</th><td>fg</td><th>3</th><td class='clr3'>3</td><td class='clr0'>0</td><th>b</th><td class='clr3'>3</td><td class='clr2'>2</td></tr></tr>
	<tr><th>4</th><th></th><th></th><th>4</th><td class='clr0'>0</td><td class='clr1'>1</td><th>c</th><td class='clr0'>0</td><td class='clr3'>3</td></tr></tr>
	<tr><th>5</th><th></th><th></th><th>5</th><td class='clr1' colspan='2'>1</td><th>d</th><td class='clr1'>1</td><td class='clr3'>3</td></tr></tr>
	<tr><th>6</th><th></th><th></th><th>6</th><td class='clr2'>2</td><td class='clr1'>1</td><th>e</th><td class='clr2'>2</td><td class='clr3'>3</td></tr></tr>
	<tr><th>7</th><th></th><th></th><th>7</th><td class='clr3'>3</td><td class='clr1'>1</td><th>f</th><td class='clr3' colspan='2'>3</td></tr></tr>
</table>

<style>
.clr0 { background:white; color:black; }
.clr1 { background:black; color:white; }
.clr2 { background:#72dec2; color:white; }
.clr3 { background:#ff0000; color:black; }
</style>

<img src='../media/identity/uxn64.png' />